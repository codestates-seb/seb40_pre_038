plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'org.asciidoctor.jvm.convert' version "3.3.2" // Spring Rest Docs
    id 'java'
}

group = 'com.codestates'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets")) // Spring Rest Docs
}

configurations {
    asciidoctorExtensions // Spring Rest Docs
}

dependencies {
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // Spring Rest Docs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor' // Spring Rest Docs
    testImplementation 'org.springframework.security:spring-security-test' // Spring Security Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // JUnit4 Test

    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'com.google.code.gson:gson'
}

tasks.named('test') {
    outputs.dir snippetsDir // Spring Rest Docs
    useJUnitPlatform()
}

tasks.named('asciidoctor') { // Spring Rest Docs
    configurations "asciidoctorExtensions"
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) { // Spring Rest Docs
    dependsOn asciidoctor
    from file("${asciidoctor.outputDir}")
    into file("src/main/resources/static/docs")
}

build { // Spring Rest Docs
    dependsOn copyDocument
}

bootJar { // Spring Rest Docs
    dependsOn copyDocument
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

//test {
//    exclude '**/*'
//}